// src/cart.jsx (–ø–æ–≤–Ω–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è)
import { createContext, useContext, useMemo, useState } from "react";

const CartCtx = createContext(null);

export function CartProvider({ children }) {
  const [cart, setCart] = useState([]);
  const [isOpen, setOpen] = useState(false);
  const [showCheckout, setShowCheckout] = useState(false);

  const open  = () => setOpen(true);
  const close = () => { setOpen(false); setShowCheckout(false); };

  function addItem(product, qty = 1) {
    setCart((prev) => {
      const found = prev.find((it) => it.id === product.id);
      if (found) {
        return prev.map((it) =>
          it.id === product.id
            ? { ...it, qty: Math.min(99, it.qty + qty) }
            : it
        );
      }
      return [...prev, { ...product, qty }];
    });
    setOpen(true);
  }

  function changeQty(id, delta) {
    setCart((prev) =>
      prev
        .map((it) =>
          it.id === id
            ? { ...it, qty: Math.max(1, Math.min(99, it.qty + delta)) }
            : it
        )
        .filter((it) => it.qty > 0)
    );
  }
  const removeItem = (id) => setCart((prev) => prev.filter((it) => it.id !== id));
  const clear = () => setCart([]);

  const total = useMemo(() => cart.reduce((s, it) => s + it.price * it.qty, 0), [cart]);
  const count = useMemo(() => cart.reduce((s, it) => s + it.qty, 0), [cart]);

  return (
    <CartCtx.Provider
      value={{
        cart, addItem, changeQty, removeItem, clear,
        total, count, isOpen, open, close,
        showCheckout, setShowCheckout
      }}
    >
      {children}
      <CartModal />
    </CartCtx.Provider>
  );
}

export function useCart() {
  const ctx = useContext(CartCtx);
  if (!ctx) throw new Error("useCart must be used within CartProvider");
  return ctx;
}

const fmt = (n) => `${n} –≥—Ä–Ω`;
const fix = (p) => (!p ? "" : p.startsWith("/img/") ? p : p.replace(/^public\//, "/"));

function CartModal() {
  const {
    cart, total, changeQty, removeItem, clear,
    isOpen, close, showCheckout, setShowCheckout
  } = useCart();

  if (!isOpen) return null;

  const fmt = (n) => `${n} –≥—Ä–Ω`;
  const fix = (p) => (!p ? "" : p.startsWith("/img/") ? p : p.replace(/^public\//, "/"));

  function submit(e) {
    e.preventDefault();
    if (!cart.length) return;
    alert("–¢—É—Ç –±—É–¥–µ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ MonoPay (—ñ–Ω–≤–æ–π—Å).");
    clear();
    close();
  }

  return (
    <div className="modalOverlay" onClick={close}>
      <div className="modal" role="dialog" aria-modal="true" onClick={(e) => e.stopPropagation()}>
        <div className="modalHead">
          {/* ‚úÖ –º—ñ–Ω—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É */}
          <h3>{showCheckout ? "–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è" : "–ö–æ—à–∏–∫"}</h3>
          <button className="iconBtn" onClick={close} aria-label="–ó–∞–∫—Ä–∏—Ç–∏">√ó</button>
        </div>

        {!showCheckout ? (
          /* ---------- –†–ï–ñ–ò–ú –ö–û–®–ò–ö–ê ---------- */
          cart.length === 0 ? (
            <div className="cartEmpty">
              <p>–ü–æ—Ä–æ–∂–Ω—å–æ. –î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ üôÇ</p>
              <button className="btnGhost" onClick={close}>–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É</button>
            </div>
          ) : (
            <>
              <ul className="cartList">
                {cart.map((it) => (
                  <li className="cartRow" key={it.id}>
                    <img className="thumb" src={fix(it.img)} alt={it.title} />

                    {/* –õ—ñ–≤–æ—Ä—É—á ‚Äî –Ω–∞–∑–≤–∞ (–æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º, –∑ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è–º, —â–æ–± —É—Å–µ —Ä—ñ–≤–Ω–æ) */}
                    <div className="cTitle">{it.title}</div>

                    {/* –ü–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å */}
                    <div className="qtyRow">
                      <button className="qtyBtn" onClick={() => changeQty(it.id, -1)}>-</button>
                      <span className="qty">{it.qty}</span>
                      <button className="qtyBtn" onClick={() => changeQty(it.id, +1)}>+</button>
                    </div>

                    {/* –ü—Ä–∞–≤–æ—Ä—É—á ‚Äî —Å—É–º–∞ –ø–æ –ø–æ–∑–∏—Ü—ñ—ó */}
                    <div className="cPrice">{fmt(it.price * it.qty)}</div>

                    {/* –í–∏–¥–∞–ª–∏—Ç–∏ */}
                    <button className="iconBtn rowX" onClick={() => removeItem(it.id)} aria-label="–í–∏–¥–∞–ª–∏—Ç–∏">√ó</button>
                  </li>
                ))}
              </ul>

              <div className="modalFoot">
                <div className="sum">–í—Å—å–æ–≥–æ: <b>{fmt(total)}</b></div>
                <div className="actions">
                  <button className="btn ghost" onClick={close}>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏</button>
                  <button className="btn primary" onClick={() => setShowCheckout(true)}>–û—Ñ–æ—Ä–º–∏—Ç–∏</button>
                </div>
              </div>
            </>
          )
        ) : (
          /* ---------- –†–ï–ñ–ò–ú –û–§–û–†–ú–õ–ï–ù–ù–Ø ---------- */
          <>
            {/* –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π —Ç–∞–∫ —Å–∞–º–æ –≤ –æ–¥–Ω—É –ª—ñ–Ω—ñ—é */}
            <div className="summaryInModal">
              {cart.map((it) => (
                <div className="summaryRow" key={it.id}>
                  <img className="thumb" src={fix(it.img)} alt={it.title} />
                  <div className="cTitle">{it.title}</div>
                  <div className="qtyRow">
                    <button className="qtyBtn" onClick={() => changeQty(it.id, -1)}>-</button>
                    <span className="qty">{it.qty}</span>
                    <button className="qtyBtn" onClick={() => changeQty(it.id, +1)}>+</button>
                  </div>
                  <div className="cPrice">{fmt(it.price * it.qty)}</div>
                </div>
              ))}
              <div className="summaryFoot">–í—Å—å–æ–≥–æ: <b>{fmt(total)}</b></div>
            </div>

            {/* –§–æ—Ä–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º–∏ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏ */}
            <form className="formInModal" onSubmit={submit}>
              <div className="grid2">
                <div>
                  <label>–Ü–º‚Äô—è</label>
                  <input required placeholder="–Ü–º‚Äô—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞" />
                </div>
                <div>
                  <label>–ü—Ä—ñ–∑–≤–∏—â–µ</label>
                  <input required placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ" />
                </div>
              </div>

              <div>
                <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input required placeholder="+380XXXXXXXXX" />
              </div>

              <div>
                <label>–ú—ñ—Å—Ç–æ / –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏</label>
                <input required placeholder="–ö–∏—ó–≤, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ..." />
              </div>

              <div className="modalFoot">
                <div className="sum">–í—Å—å–æ–≥–æ: <b>{fmt(total)}</b></div>
                <div className="actions">
                  <button type="button" className="btn ghost" onClick={() => setShowCheckout(false)}>
                    –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞
                  </button>
                  <button type="submit" className="btn primary">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏</button>
                </div>
              </div>
            </form>
          </>
        )}
      </div>
    </div>
  );
}