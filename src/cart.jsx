// src/cart.jsx
import { createContext, useContext, useMemo, useState } from "react";

const CartCtx = createContext(null);

export function CartProvider({ children }) {
  const [cart, setCart] = useState([]);
  const [isOpen, setOpen] = useState(false);
  const [showCheckout, setShowCheckout] = useState(false);

  const open  = () => setOpen(true);
  const close = () => { setOpen(false); setShowCheckout(false); };

  function addItem(product, qty = 1) {
    setCart((prev) => {
      const found = prev.find((it) => it.id === product.id);
      if (found) {
        return prev.map((it) =>
          it.id === product.id
            ? { ...it, qty: Math.min(99, it.qty + qty) }
            : it
        );
      }
      return [...prev, { ...product, qty }];
    });
    setOpen(true);
  }

  function changeQty(id, delta) {
    setCart((prev) =>
      prev
        .map((it) =>
          it.id === id
            ? { ...it, qty: Math.max(1, Math.min(99, it.qty + delta)) }
            : it
        )
        .filter((it) => it.qty > 0)
    );
  }
  const removeItem = (id) => setCart((prev) => prev.filter((it) => it.id !== id));
  const clear = () => setCart([]);

  const total = useMemo(() => cart.reduce((s, it) => s + it.price * it.qty, 0), [cart]);
  const count = useMemo(() => cart.reduce((s, it) => s + it.qty, 0), [cart]);

  return (
    <CartCtx.Provider
      value={{
        cart, addItem, changeQty, removeItem, clear,
        total, count, isOpen, open, close,
        showCheckout, setShowCheckout
      }}
    >
      {children}
      <CartModal />
    </CartCtx.Provider>
  );
}

export function useCart() {
  const ctx = useContext(CartCtx);
  if (!ctx) throw new Error("useCart must be used within CartProvider");
  return ctx;
}

const fmt = (n) => `${n} –≥—Ä–Ω`;
const fix = (p) => (!p ? "" : p.startsWith("/img/") ? p : p.replace(/^public\//, "/"));

function CartModal() {
  const {
    cart, total, changeQty, removeItem, clear,
    isOpen, close, showCheckout, setShowCheckout
  } = useCart();

  const [submitting, setSubmitting] = useState(false);

  if (!isOpen) return null;

  async function submit(e) {
    e.preventDefault();
    if (!cart.length || submitting) return;

    // –∑—ñ–±—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏:
    const fd = new FormData(e.currentTarget);
    const customer = {
      firstName: (fd.get("firstName") || "").trim(),
      lastName:  (fd.get("lastName")  || "").trim(),
      phone:     (fd.get("phone")     || "").trim(),
      np:        (fd.get("np")        || "").trim(), // –º—ñ—Å—Ç–æ + –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
    };

    // –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–∫–ª–∞–¥)
    const safeCart = cart.map(it => ({
      id: it.id,
      title: it.title,
      price: it.price,
      qty: it.qty,
      img: it.img || "",
    }));

    try {
      setSubmitting(true);
      const resp = await fetch("/api/create-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ cart: safeCart, customer }),
      });
      const data = await resp.json();

      if (!resp.ok || !data.checkoutUrl) {
        console.error("MonoPay error:", data);
        alert("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º –≤ Instagram.");
        setSubmitting(false);
        return;
      }

      // —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–ª–∞—Ç–∏ MonoPay
      window.location.href = data.checkoutUrl;
    } catch (err) {
      console.error(err);
      alert("–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      setSubmitting(false);
    }
  }

  return (
    <div className="modalOverlay" onClick={close}>
      <div className="modal" role="dialog" aria-modal="true" onClick={(e) => e.stopPropagation()}>
        <div className="modalHead">
          <h3>{showCheckout ? "–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è" : "–ö–æ—à–∏–∫"}</h3>
          <button className="iconBtn" onClick={close} aria-label="–ó–∞–∫—Ä–∏—Ç–∏">√ó</button>
        </div>

        {!showCheckout ? (
          /* ---------- –†–ï–ñ–ò–ú –ö–û–®–ò–ö–ê ---------- */
          cart.length === 0 ? (
            <div className="cartEmpty">
              <p>–ü–æ—Ä–æ–∂–Ω—å–æ. –î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ üôÇ</p>
              <button className="btnGhost" onClick={close}>–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É</button>
            </div>
          ) : (
            <>
              <ul className="cartList">
                {cart.map((it) => (
                  <li className="cartRow" key={it.id}>
                    <img className="thumb" src={fix(it.img)} alt={it.title} />

                    {/* –õ—ñ–≤–æ—Ä—É—á ‚Äî –Ω–∞–∑–≤–∞ */}
                    <div className="cTitle">{it.title}</div>

                    {/* –ü–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å */}
                    <div className="qtyRow">
                      <button className="qtyBtn" onClick={() => changeQty(it.id, -1)}>-</button>
                      <span className="qty">{it.qty}</span>
                      <button className="qtyBtn" onClick={() => changeQty(it.id, +1)}>+</button>
                    </div>

                    {/* –ü—Ä–∞–≤–æ—Ä—É—á ‚Äî —Å—É–º–∞ –ø–æ –ø–æ–∑–∏—Ü—ñ—ó */}
                    <div className="cPrice">{fmt(it.price * it.qty)}</div>

                    {/* –í–∏–¥–∞–ª–∏—Ç–∏ */}
                    <button className="iconBtn rowX" onClick={() => removeItem(it.id)} aria-label="–í–∏–¥–∞–ª–∏—Ç–∏">√ó</button>
                  </li>
                ))}
              </ul>

              <div className="modalFoot">
                <div className="sum">–í—Å—å–æ–≥–æ: <b>{fmt(total)}</b></div>
                <div className="actions">
                  <button className="btn ghost" onClick={close}>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏</button>
                  <button className="btn primary" onClick={() => setShowCheckout(true)}>–û—Ñ–æ—Ä–º–∏—Ç–∏</button>
                </div>
              </div>
            </>
          )
        ) : (
          /* ---------- –†–ï–ñ–ò–ú –û–§–û–†–ú–õ–ï–ù–ù–Ø ---------- */
          <>
            {/* –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π —Ç–∞–∫ —Å–∞–º–æ –≤ –æ–¥–Ω—É –ª—ñ–Ω—ñ—é */}
            <div className="summaryInModal">
              {cart.map((it) => (
                <div className="summaryRow" key={it.id}>
                  <img className="thumb" src={fix(it.img)} alt={it.title} />
                  <div className="cTitle">{it.title}</div>
                  <div className="qtyRow">
                    <button className="qtyBtn" onClick={() => changeQty(it.id, -1)}>-</button>
                    <span className="qty">{it.qty}</span>
                    <button className="qtyBtn" onClick={() => changeQty(it.id, +1)}>+</button>
                  </div>
                  <div className="cPrice">{fmt(it.price * it.qty)}</div>
                </div>
              ))}
              <div className="summaryFoot">–í—Å—å–æ–≥–æ: <b>{fmt(total)}</b></div>
            </div>

            {/* –§–æ—Ä–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è */}
            <form className="formInModal" onSubmit={submit}>
              <div className="grid2">
                <div>
                  <label htmlFor="firstName">–Ü–º‚Äô—è</label>
                  <input id="firstName" name="firstName" required placeholder="–Ü–º‚Äô—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞" />
                </div>
                <div>
                  <label htmlFor="lastName">–ü—Ä—ñ–∑–≤–∏—â–µ</label>
                  <input id="lastName" name="lastName" required placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ" />
                </div>
              </div>

              <div>
                <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input id="phone" name="phone" required placeholder="+380XXXXXXXXX" />
              </div>

              <div>
                <label htmlFor="np">–ú—ñ—Å—Ç–æ / –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏</label>
                <input id="np" name="np" required placeholder="–ö–∏—ó–≤, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ..." />
              </div>

              <div className="modalFoot">
                <div className="sum">–í—Å—å–æ–≥–æ: <b>{fmt(total)}</b></div>
                <div className="actions">
                  <button type="button" className="btn ghost" onClick={() => setShowCheckout(false)}>
                    –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞
                  </button>
                  <button type="submit" className="btn primary" disabled={submitting}>
                    {submitting ? "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏..." : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏"}
                  </button>
                </div>
              </div>
            </form>
          </>
        )}
      </div>
    </div>
  );
}